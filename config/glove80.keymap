/*
 * Copyright (c) 2020 The ZMK Contributors
 * Copyright (c) 2025 Innaworks Development Limited, trading as MoErgo
 *
 * SPDX-License-Identifier: MIT
 */


/* THIS FILE WAS GENERATED BY GLOVE80 LAYOUT EDITOR
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */

#include <behaviors.dtsi>
/* Include all behavior includes needed */
#include <dt-bindings/zmk/outputs.h>

// Custom includes
#include "includes/behaviors.dtsi"
#include "includes/combos.dtsi"
#include "includes/macros.dtsi"
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>

/* On demand includes */


/* Helper Macros, based on https://github.com/urob/zmk-helpers/ */

#pragma once

#define ZMK_HELPER_STRINGIFY(x) #x

// Preprocessor mechanism to overload macros, cf. https://stackoverflow.com/a/27051616/6114651
#define VARGS_(_10, _9, _8, _7, _6, _5, _4, _3, _2, _1, N, ...) N
#define VARGS(...) VARGS_(__VA_ARGS__, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0)
#define CONCAT_(a, b) a##b
#define CONCAT(a, b) CONCAT_(a, b)

#define ZMK_BEHAVIOR_CORE_tap_dance  \
    compatible = "zmk,behavior-tap-dance"; \
    #binding-cells = <0>

#define ZMK_BEHAVIOR(name, type, ...) \
    name: name { \
        ZMK_BEHAVIOR_CORE_ ## type; \
        __VA_ARGS__ \
    };

#define ZMK_TAP_DANCE(name, ...) \
    ZMK_BEHAVIOR(name, tap_dance, __VA_ARGS__)

#define ZMK_TD_LAYER(name, layer) \
    ZMK_TAP_DANCE(name, \
        tapping-term-ms = <200>; \
        bindings = <&mo layer>, <&to layer>; \
)

/* Automatically generated layer name #define */
#define LAYER_Base 0
#define LAYER_Lower 1
#define LAYER_Combos 2
#define LAYER_Magic 3

/* To deal with the situation where there is no Lower layer, to keep &lower happy */
#ifndef LAYER_Lower
#define LAYER_Lower 0
#endif

/* Custom Device-tree */


/* Input Listeners */


/* System behavior and Macros */
/ {
    behaviors {
        ZMK_TD_LAYER(lower, LAYER_Lower)
    };
};

/ {
    macros {
        rgb_ug_status_macro: rgb_ug_status_macro {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&rgb_ug RGB_STATUS>;
        };
    };
};


/ {
#ifdef BT_DISC_CMD
    behaviors {
        bt_0: bt_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_0";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_0>, <&bt BT_DISC 0>;
        };
        bt_1: bt_1 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_1";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_1>, <&bt BT_DISC 1>;
        };
        bt_2: bt_2 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_2";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_2>, <&bt BT_DISC 2>;
        };
        bt_3: bt_3 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_3";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_3>, <&bt BT_DISC 3>;
        };
    };
    macros {
        bt_select_0: bt_select_0 {
            label = "BT_SELECT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 0>;
        };
        bt_select_1: bt_select_1 {
            label = "BT_SELECT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 1>;
        };
        bt_select_2: bt_select_2 {
            label = "BT_SELECT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 2>;
        };
        bt_select_3: bt_select_3 {
            label = "BT_SELECT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 3>;
        };
    };
#else
    macros {
        bt_0: bt_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 0>;
        };
        bt_1: bt_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 1>;
        };
        bt_2: bt_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 2>;
        };
        bt_3: bt_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 3>;
        };
    };
#endif
};

/ {
    behaviors {
        magic: magic {
            compatible = "zmk,behavior-hold-tap";
            label = "MAGIC_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&rgb_ug_status_macro>;
        };
    };
};

/* Include key position definitions following Moergo convention */
#include "includes/key_positions.dtsi"

/* Custom Defined Behaviors */
/ {

};

/* Automatically generated macro definitions */
/ {
    macros {

        macro_parenthesis_open_close: macro_parenthesis_open_close {
            label = "&MACRO_PARENTHESIS_OPEN_CLOSE";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap>
                , <&kp LPAR>
                , <&kp RPAR>
                , <&kp LEFT>;
        };

        macro_brace_open_close: macro_brace_open_close {
            label = "&MACRO_BRACE_OPEN_CLOSE";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap>
                , <&kp LBRC>
                , <&kp RBRC>
                , <&kp LEFT>;
        };

        macro_bracket_open_close: macro_bracket_open_close {
            label = "&MACRO_BRACKET_OPEN_CLOSE";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap>
                , <&kp LBKT>
                , <&kp RBKT>
                , <&kp LEFT>;
        };

        macro_lt_gt: macro_lt_gt {
            label = "&MACRO_LT_GT";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap>
                , <&kp LT>
                , <&kp GT>
                , <&kp LEFT>;
        };

        macro_super_alt_b: macro_super_alt_b {
            label = "&MACRO_SUPER_ALT_B";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_press>
                , <&kp LGUI>
                , <&kp LALT>
                , <&macro_press>
                , <&kp B>
                , <&macro_release>
                , <&kp LGUI>
                , <&kp LALT>;
        };

        macro_equal_gt: macro_equal_gt {
            label = "&MACRO_EQUAL_GT";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap>
                , <&kp EQUAL>
                , <&kp GT>;
        };

        macro_double_single_quotes: macro_double_single_quotes {
            label = "&MACRO_DOUBLE_SINGLE_QUOTES";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap>
                , <&kp SQT>
                , <&kp SQT>
                , <&kp LEFT>;
        };

        macro_double_double_quotes: macro_double_double_quotes {
            label = "&MACRO_DOUBLE_DOUBLE_QUOTES";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap>
                , <&kp DQT>
                , <&kp DQT>
                , <&kp LEFT>;
        };
    };
};

/* Automatically generated behavior definitions */
/ {
    behaviors {


        hmk_left_pinky: hmk_left_pinky {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <260>;
            bindings = <&kp>, <&kp>;
            flavor = "balanced";
            quick-tap-ms = <300>;
            require-prior-idle-ms = <150>;
            hold-while-undecided;
            hold-trigger-key-positions = <52 53 54 69 70 71 55 56 57 74 72 73 58 40 28 16 5 6 7 19 18 17 29 41 59 75 76 77 61 60 42 43 31 30 8 9 21 20 32 44 62 78 79 63 45 33>;
            hold-trigger-on-release;
        };

        hmk_right_pinky: hmk_right_pinky {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <260>;
            bindings = <&kp>, <&kp>;
            flavor = "balanced";
            quick-tap-ms = <300>;
            require-prior-idle-ms = <150>;
            hold-while-undecided;
            hold-trigger-key-positions = <54 53 52 69 70 71 68 67 66 65 64 47 46 34 22 1 10 0 2 3 4 15 27 39 51 50 48 49 35 11 12 14 38 37 36 23 24 25 26 13>;
            hold-trigger-on-release;
        };

        hmk_right_ring: hmk_right_ring {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <280>;
            bindings = <&kp>, <&kp>;
            flavor = "balanced";
            quick-tap-ms = <300>;
            require-prior-idle-ms = <150>;
            hold-while-undecided;
            hold-trigger-key-positions = <54 53 52 69 70 71 68 67 66 65 64 47 46 34 22 1 10 0 2 3 4 15 27 39 51 50 48 49 35 11 12 14 38 37 36 23 24 25 26 13>;
        };

        hmk_left_ring: hmk_left_ring {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <260>;
            bindings = <&kp>, <&kp>;
            flavor = "balanced";
            quick-tap-ms = <300>;
            require-prior-idle-ms = <150>;
            hold-while-undecided;
            hold-trigger-key-positions = <52 53 54 69 70 71 55 56 57 74 72 73 58 40 28 16 5 6 7 19 18 17 29 41 59 75 76 77 61 60 42 43 31 30 8 9 21 20 32 44 62 78 79 63 45 33>;
        };

        hmk_left_middle: hmk_left_middle {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <260>;
            bindings = <&kp>, <&kp>;
            flavor = "balanced";
            quick-tap-ms = <300>;
            require-prior-idle-ms = <150>;
            hold-while-undecided;
            hold-trigger-key-positions = <52 53 54 69 70 71 55 56 57 74 72 73 58 40 28 16 5 6 7 19 18 17 29 41 59 75 76 77 61 60 42 43 31 30 8 9 21 20 32 44 62 78 79 63 45 33>;
        };

        hmk_right_middle: hmk_right_middle {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <260>;
            bindings = <&kp>, <&kp>;
            flavor = "balanced";
            quick-tap-ms = <300>;
            require-prior-idle-ms = <150>;
            hold-while-undecided;
            hold-trigger-key-positions = <54 53 52 69 70 71 68 67 66 65 64 47 46 34 22 1 10 0 2 3 4 15 27 39 51 50 48 49 35 11 12 14 38 37 36 23 24 25 26 13>;
        };

        hmk_right_index: hmk_right_index {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <260>;
            bindings = <&kp>, <&kp>;
            flavor = "balanced";
            quick-tap-ms = <300>;
            require-prior-idle-ms = <150>;
            hold-while-undecided;
            hold-trigger-key-positions = <54 53 52 69 70 71 68 67 66 65 64 47 46 34 22 1 10 0 2 3 4 15 27 39 51 50 48 49 35 11 12 14 38 37 36 23 24 25 26 13>;
        };

        hmk_left_index: hmk_left_index {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <260>;
            bindings = <&kp>, <&kp>;
            flavor = "balanced";
            quick-tap-ms = <300>;
            require-prior-idle-ms = <150>;
            hold-while-undecided;
            hold-trigger-key-positions = <52 53 54 69 70 71 55 56 57 74 72 73 58 40 28 16 5 6 7 19 18 17 29 41 59 75 76 77 61 60 42 43 31 30 8 9 21 20 32 44 62 78 79 63 45 33>;
        };

        hmk_left_thumb_middle_inner: hmk_left_thumb_middle_inner {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <260>;
            bindings = <&lower>, <&kp>;
            flavor = "balanced";
            quick-tap-ms = <300>;
            require-prior-idle-ms = <150>;
            hold-while-undecided;
            hold-trigger-key-positions = <58 40 28 16 5 6 7 19 18 17 29 41 59 75 76 77 61 60 42 43 31 30 8 9 21 20 32 44 62 78 79 63 45 33 4 3 2 1 0 22 34 46 10 11 23 47 65 64 66 67 68 50 51 39 27 15 14 26 38 49 35 48 36 37 25 24 12 13>;
        };
    };
};

/* Automatically generated combos definitions */


/* Automatically generated keymap */
/ {
    keymap {
        compatible = "zmk,keymap";


        layer_Base {
            bindings = <
               &kp F1                  &kp F2                 &kp F3                    &kp F4                   &kp F5                                                                                                                                               &kp F6                     &kp F7                  &kp F8                      &kp F9    &kp F10
            &kp EQUAL                  &kp N1                 &kp N2                    &kp N3                   &kp N4  &kp N5                                                                                                             &kp N6                    &kp N7                     &kp N8                  &kp N9                      &kp N0  &kp MINUS
              &kp TAB                   &kp Q                  &kp W                     &kp E                    &kp R   &kp T                                                                                                              &kp Y                     &kp U                      &kp I                   &kp O                       &kp P   &kp BSLH
              &kp ESC  &hmk_left_pinky LGUI A  &hmk_left_ring LALT S  &hmk_left_middle LSHFT D  &hmk_left_index LCTRL F   &kp G                                                                                                              &kp H  &hmk_right_index RCTRL J  &hmk_right_middle RSHFT K  &hmk_right_ring LALT L  &hmk_right_pinky RGUI SEMI    &kp SQT
            &kp GRAVE                   &kp Z                  &kp X                     &kp C                    &kp V   &kp B     &lower                                             &kp LCTRL  &kp RALT  &kp LGUI  &kp RCTRL  &kp RSHFT   &kp N                     &kp M                  &kp COMMA                 &kp DOT                    &kp FSLH  &kp PG_UP
   &magic LAYER_Magic 0                &kp HOME                &kp END                  &kp LEFT                &kp RIGHT          &kp SPACE  &hmk_left_thumb_middle_inner MACRO_PLACEHOLDER SPACE  &kp BSPC   &kp DEL    &kp RET   &kp LGUI                            &kp UP                   &kp DOWN                &kp LBKT                    &kp RBKT  &kp PG_DN
            >;
        };

        layer_Lower {
            bindings = <
  &kp C_BRI_DN  &kp C_BRI_UP           &kp C_PREV   &kp C_PP  &kp C_NEXT                                                                                                   &kp C_MUTE                 &kp C_VOL_DN                 &kp C_VOL_UP            &none  &kp PAUSE_BREAK
        &trans     &kp GRAVE             &kp LPAR   &kp RPAR    &kp SEMI  &kp COMMA                                                            &kp DQT                &macro_equal_gt  &macro_double_single_quotes  &macro_double_double_quotes  &kp KP_MULTIPLY  &kp PRINTSCREEN
      &kp EXCL      &kp LBRC              &kp SQT    &kp DQT    &kp RBRC  &kp QMARK                                                          &kp COLON      &macro_bracket_open_close                     &kp LBKT                     &kp RBKT        &kp MINUS   &kp SCROLLLOCK
      &kp HASH     &kp CARET            &kp EQUAL  &kp UNDER    &kp DLLR   &kp STAR                                                          &kp MINUS  &macro_parenthesis_open_close                     &kp LPAR                     &kp RPAR        &kp UNDER            &none
 &kp LS(GRAVE)        &kp LT  &kp LS(NON_US_BSLH)  &kp MINUS      &kp GT   &kp FSLH     &trans     &trans     &to 0  &trans  &trans  &trans  &kp UNDER                   &macro_lt_gt                       &kp LT                       &kp GT     &kp KP_ENTER           &trans
    &kp LS(N2)      &kp AMPS             &kp LBKT   &kp RBKT    &kp PLUS             &kp PRCNT  &kp COLON  &kp SEMI  &trans  &trans  &trans                   &macro_brace_open_close                     &kp LBRC                     &kp RBRC     &kp KP_ENTER           &trans
            >;
        };

        layer_Combos {
            bindings = <
  &none   &none   &none   &none   &none                                                                   &none   &none   &none   &none   &none
  &none   &none   &none   &none   &none   &none                                                   &none   &none   &none   &none   &none   &none
  &none   &none   &none   &none   &none   &none                                                   &none   &none   &none   &none   &none   &none
  &none   &none   &none   &none   &none   &none                                                   &none   &none   &none   &none   &none   &none
  &none   &none   &none   &none   &none   &none   &none   &none   &none   &none   &none   &none   &none   &none   &none   &none   &none   &none
  &none   &none   &none   &none   &none           &none   &none   &none   &none   &none   &none           &none   &none   &none   &none   &none
            >;
        };

        layer_Magic {
            bindings = <
  &bt BT_CLR            &none            &none            &none            &none                                                                                  &none   &none   &none   &none  &bt BT_CLR_ALL
       &none            &none            &none            &none            &none            &none                                                         &none   &none   &none   &none   &none           &none
       &none  &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                         &none   &none   &none   &none   &none           &none
 &bootloader  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                         &none   &none   &none   &none   &none     &bootloader
  &sys_reset            &none            &none            &none            &none            &none   &bt_2   &bt_3         &none   &none   &none   &none   &none   &none   &none   &none   &none      &sys_reset
       &none            &none            &none            &none            &none                    &bt_0   &bt_1  &out OUT_USB   &none   &none   &none           &none   &none   &none   &none           &none
            >;
        };

    };
};
